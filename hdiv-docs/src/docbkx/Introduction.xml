<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook"
	version="5.0" xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	<title>Introduction</title>

	<section xml:id="introduction-overwiew">
		<title>Overview</title>

		<para>
			We can briefly define HDIV as a Java Web Application Security
			Framework that controls the information flow between the server and
			the client
			avoiding many of the most important web risks.

			HDIV extends
			web
			applications behaviour by adding Security
			functionalities,
			maintaining
			the API and the framework specification.
			This implies that
			we can use
			HDIV in applications developed in Spring
			MVC, Grails,
			JSTL,
			Struts 1.x,
			Struts 2.x, JSF in a
			transparent way to the
			programmer and
			without adding any complexity to
			the application
			development.
		</para>

		<para>
			The security functionalities added to the web applications are
			these:
		</para>

		<itemizedlist>

			<listitem>
				<para>
					<emphasis role="bold">Integrity</emphasis>
					:
					HDIV guarantees integrity (no data modification) of all the data
					generated by the server which should not be modified by the client
					(links, hidden fields, combo values, radio buttons, destiny pages,
					etc.). Within HDIV this kind of data is known as non editable data.
					Thanks to this property HDIV helps to eliminate most of the
					vulnerabilities based on the parameter tampering.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Editable Data Validation</emphasis>
					:
					Editable validation is the data that comes from textbox and
					textarea fields within a form. In other words,
					it's new data that
					come from the client side and by default it's untrusted data.HDIV
					eliminates to a large extent the
					risk originated by attacks of type
					Cross-site scripting (XSS) and
					SQL Injection using generic
					validations applied at application level.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Confidentiality</emphasis>
					:
					HDIV guarantees the confidentiality of the non editable data as
					well. Usually lots of the data sent to the client has key
					information for the attackers such as database registry
					identifiers, column or table names, web directories, etc. All these
					values are hidden by HDIV to avoid a malicious use of them. For
					example a link of this type, http://www.host.com?data1=12
					is
					replaced by http://www.host.com?data1=0, guaranteeing
					confidentiality of the values representing database identifiers.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">Anti Cross-site request forgery (CSRF)
						token
					</emphasis>
					:
					A Random token is placed in each form and link of
					the HTML
					response, ensuring that this value will be submitted with
					the next
					request. This random string provides protection because
					not only
					does the compromised site need to know the URL of the
					target site
					and a valid request format for the target site, it also
					must know
					the random string which changes for each visited page.
				</para>
			</listitem>

		</itemizedlist>

	</section>

	<section xml:id="introduction-coveredrisks">
		<title>Covered risks based on OWASP top ten</title>

		<para>HDIV covered risks:</para>

		<itemizedlist>

			<listitem>
				<para>
					<emphasis role="bold">A1 (Injection)</emphasis>
					: the source of the problem of sql injection
					risk is based on sql
					querys that use untrusted data without the use
					of parametrized
					querys
					(without PreparedStatement in Java
					environments). First of all
					HDIV
					minimize the existence of untrusted
					data thanks to the web
					information flow control system
					that avoid the
					manipulation of the
					data generated by the server side.
					This
					architecture minimize the
					risk to just the new data generated
					legally from editable
					form
					elements. It’s important to note that
					even using PreparedStamented
					if the query is based on untrusted data
					generated previously at
					server side
					(for instance the identification
					id of an item within a
					list) it’s
					possible to exist an sql injection
					risk.

					In addition to
					that HDIV implements an internal system that detect Sql Injection
					risks within source-code.

				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A2 (Broken authentication and session
						management)
					</emphasis>
					: HDIV
					doesn’t create a parallel authentication system delegating
					this
					responsibility to application servers.
				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A3 (XSS)</emphasis>
					: the source of the problem of XSS risk is based on
					writes that use
					untrusted data without the use of escaped
					functions. First of all
					HDIV minimize the existence of untrusted
					data thanks to the web
					information flow control system implement by
					HDIV, minimizing the
					risk to the new data generated legally from
					editable form elements.

					In addition to that HDIV implements an internal system that detects
					XSS risks within source-code.

				</para>
				<sbr />
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">A4 (Insecure direct object reference)
					</emphasis>
					: the source of the
					problem of this risk is based on the
					manipulation or updating of
					the data generated previously at server
					side. For instance a list
					is sent to the client with an id for each
					item. The client
					manipulated the id and try to access to a
					forbidden
					id. HDIV web
					information flor control system control all
					the data
					generated at
					server side ensuring the integrity of the data
					generated at serve
					side. In additon to that and optionally is
					possible to ensure the
					confidentiality of the data generated at
					server side avoiding the
					exposition of critical (such as credit
					cards, etc.).
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A5 (security misconfiguration)</emphasis>
					: current application security
					architectures doesn’t follow security
					by default approach, on the
					contrary, the programmers must apply
					security configuration to
					avoid the access to private or
					confidential resources. Thanks to
					the information flow control
					system implemented by HDIV all the
					resources (links and forms)
					exposed by the application are
					controlled by HDIV and doesn't allow
					to break the original contract
					offered by the server.

					In other words,
					even when the programmer
					doesn’t use access control
					systems or ACL
					(Java EE or Spring
					Security) HDIV is able to know
					which resource is
					accesible by each
					user.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A6 (Sensitive data exposure)</emphasis>
					: HDIV offers a confitentialy
					property to all data generated at
					sever side. That is to say, HDIV
					replace original parameter values
					generated at server side by
					relative values (0,1,2,4, etc.) that
					avoid exposing critical data
					to the client side.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A7 (Missing function level access control)
					</emphasis>
					: current
					application security architectures doesn’t follow security
					by
					default approach, on the contrary, the programmers must apply
					security controls to avoid the access to private or confidential
					resources. Thanks to the information flow control system
					implemented by HDIV all the resources (links and forms) exposed by
					the application are controlled by HDIV and doesn't allow to break
					the original contract offered by the server.

					In other words, even
					when the programmer doesn’t use access control
					systems or ACL (Java
					EE or Spring Security) HDIV is able to know
					which resource is
					accesible by each user.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A8 (CSRF)</emphasis>
					: HDIV adss aleatory tokens to each link or form
					existing within the
					application. It makes extremely difficult to
					implement an CSRF
					attack because the attacker doesn’t know with is
					the value.

					In order
					to offer an extreme security level HDIV doesn’t
					use an
					aleatory token
					per session and create a new token for each
					requested page. Even the
					token used by links and forms within the
					same page are different
					avoiding the reuse of link tokens to
					exploit a web form.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A9 (using components with known
						vulnerabilities)
					</emphasis>
					: although
					HDIV can’t update the base software of web applications
					and is
					advisable to update the software versions to the latest, the
					web
					information flow control system implemented by HDIV avoid and
					makes
					more difficult to exploit many or known and unknown of the
					vulnerabilities of base software.

					In other words, in many cases
					(see: Struts cancel vulnerability, )
					the risks are based on an
					unexpected use of a web application. HDIV
					doesn't allow to break the
					original contract and thanks to this
					property it is more difficult
					to exploit existing risks.
				</para>
				<sbr />
			</listitem>

			<listitem>
				<para>
					<emphasis role="bold">A10 (Unvalidated redirects and forwards)
					</emphasis>
					: this vulnerability
					is mainly related with the manipulation of non
					editable data or
					data generated previously at server side. HDIV
					control all the data
					server by the server and doesn’t allow the
					redirection to malicious
					web sites.
				</para>
			</listitem>

		</itemizedlist>
	</section>

</chapter>
  